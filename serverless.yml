# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: backend-estagio
# app and org for use with dashboard.serverless.com
app: backend-estagio-app
org: saymonptrevisan

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    HOST_UMBLER: ${env:HOST_UMBLER}
    PORT_UMBLER: ${env:PORT_UMBLER}
    USER_UMBLER: ${env:USER_UMBLER}
    PASS_UMBLER: ${env:PASS_UMBLER}

    DEV_MONGO_URI: ${env:DEV_MONGO_URI}

    JWT_SECRET: ${env:JWT_SECRET}

    CREATEPRODUCT: ${env:CREATEPRODUCT}
    DELETEPRODUCT: ${env:DELETEPRODUCT}
    UPDATEPRODUCT: ${env:UPDATEPRODUCT}

    CREATEUSER: ${env:CREATEUSER}
    DELETEUSER: ${env:DELETEUSER}
    UPDATEUSER: ${env:UPDATEUSER}

    USERNAME: ${env:USERNAME}
    AWS_SERVER_PUBLIC_KEY: ${env:AWS_SERVER_PUBLIC_KEY}
    AWS_SERVER_SECRET_KEY: ${env:AWS_SERVER_SECRET_KEY}
    REGION_NAME: ${env:REGION_NAME}


# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
package:
  exclude:
    - test/**

functions:
  deleteUser:
    handler: backend.handlers.users.delete
    events:
      - http:
          path: /api/v1/deleteUser
          method: delete
          cors: true
  updatePermissions:
    handler: backend.handlers.users.update_permissions
    events:
      - http:
          path: /api/v1/updatePermissions
          method: post
          cors: true
  register:
    handler: backend.handlers.users.register
    events:
      - http:
          path: /api/v1/register
          method: post
          cors: true
  login:
    handler: backend.handlers.users.login
    events:
      - http:
          path: /api/v1/login
          method: post
          cors: true
  emailConfirmation:
    handler: backend.handlers.users.email_confirmation
    events:
      - http:
          path: /api/v1/emailConfirmation
          method: post
          cors: true
  requestPasswordReset:
    handler: backend.handlers.users.request_password_reset
    events:
      - http:
          path: /api/v1/requestPasswordReset
          method: post
          cors: true
  passwordReset:
    handler: backend.handlers.users.password_reset
    events:
      - http:
          path: /api/v1/passwordReset
          method: post
          cors: true
  listUsers:
    handler: backend.handlers.users.list_users
    events:
      - http:
          path: /api/v1/listUsers
          method: get
          cors: true
  sendEmail:
    handler: backend.handlers.contact_email.send_contact_email
    events:
      - http:
          path: /api/v1/sendContactEmail
          method: post
          cors: true
  # Upload
  uploadFile:
    handler: backend.handlers.s3.upload_file
    events:
      - http:
          path: /api/v1/uploadFile
          method: post
          cors: true
  deleteFile:
    handler: backend.handlers.s3.delete_file
    events:
      - http:
          path: /api/v1/deleteFile
          method: delete
          cors: true
  uploadPresignedUrl:
    handler: backend.handlers.s3.upload_presigned_url
    events:
      - http:
          path: /api/v1/uploadPresignedUrl/{path}/{fileName}
          method: get
          cors: true
  # Orders
  createOrder:
    handler: backend.handlers.orders.create
    events:
      - http:
          path: /api/v1/createOrder
          method: post
          cors: true
  updateOrder:
    handler: backend.handlers.orders.update
    events:
      - http:
          path: /api/v1/updateOrder
          method: patch
          cors: true
  deleteOrder:
    handler: backend.handlers.orders.delete
    events:
      - http:
          path: /api/v1/deleteOrder/{id}
          method: delete
          cors: true
  showOrder:
    handler: backend.handlers.orders.show
    events:
      - http:
          path: /api/v1/showOrder/{id}
          method: get
          cors: true
  listOrders:
    handler: backend.handlers.orders_list
    events:
      - http:
          path: /api/v1/listOrders
          method: get
          cors: true
  # Products
  createProduct:
    handler: backend.handlers.products.create
    events:
      - http:
          path: /api/v1/createProduct
          method: post
          cors: true
  updateProduct:
    handler: backend.handlers.products.update
    events:
      - http:
          path: /api/v1/updateProduct
          method: post
          cors: true
  deleteProduct:
    handler: backend.handlers.products.delete
    events:
      - http:
          path: /api/v1/deleteProduct/{id}
          method: delete
          cors: true
  showProduct:
    handler: backend.handlers.products.show
    events:
      - http:
          path: /api/v1/showProduct/{id}
          method: get
          cors: true
  listProducts:
    handler: backend.handlers.products.products_list
    events:
      - http:
          path: /api/v1/listProducts
          method: get
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin

